# NOTE: Below YAML has the following environment vars from track setup: MY_HARNESS_PROJECT, MY_HARNESS_ORG, MY_CONTAINER_REGISTRY_LINK
pipeline:
  identifier: autostopipeline
  name: autostopipeline
  orgIdentifier: "${MY_HARNESS_ORG}"
  projectIdentifier: "${MY_HARNESS_PROJECT}"
  properties:
    ci:
      codebase:
        build:
          spec:
            branch: master
          type: branch
        repoName: my-web-app
  stages:
    - stage:
        description: ""
        identifier: Static_Tests
        name: Static Tests
        spec:
          cloneCodebase: true
          execution:
            steps:
              - parallel:
                  - step:
                      identifier: Bandit
                      name: Bandit
                      spec:
                        advanced:
                          log:
                            level: info
                        config: default
                        mode: orchestration
                        target:
                          detection: auto
                          type: repository
                      type: Bandit
                  - step:
                      identifier: Owasp
                      name: Owasp
                      spec:
                        advanced:
                          log:
                            level: info
                        config: default
                        mode: orchestration
                        target:
                          detection: auto
                          type: repository
                      type: Owasp
                  - step:
                      failureStrategies:
                        - onFailure:
                            action:
                              type: Ignore
                            errors:
                              - AllErrors
                      identifier: Pylint
                      name: "Lint "
                      spec:
                        command: |-
                          ls -l
                          pip install ruff
                          ruff check .
                        shell: Sh
                      type: Run
          platform:
            arch: Amd64
            os: Linux
          runtime:
            spec: {}
            type: Cloud
        type: SecurityTests
    - parallel:
        - stage:
            description: ""
            identifier: Build_and_Test_App
            name: Build App
            spec:
              caching:
                enabled: false
                paths: []
              cloneCodebase: true
              execution:
                steps:
                  - step:
                      identifier: Build_and_Push_App
                      name: Build and Push App
                      spec:
                        connectorRef: mycontainerregistryconnector
                        dockerfile: Dockerfile.app
                        repo: "${MY_CONTAINER_REGISTRY_LINK}"/library/sqli
                        tags:
                          - 0.0.1
                      type: BuildAndPushDockerRegistry
                  - step:
                      type: AquaTrivy
                      name: AquaTrivy
                      identifier: AquaTrivy
                      spec:
                        mode: orchestration
                        config: default
                        target:
                          type: container
                          detection: auto
                        advanced:
                          log:
                            level: info
                        privileged: true
                        image:
                          type: docker_v2
                          name: library/sqli
                          domain: "${MY_CONTAINER_REGISTRY_LINK}"
                          access_id: admin
                          access_token: <+secrets.getValue("mycontainerregistrysecret")>
                          tag: 0.0.1
              platform:
                os: Linux
                arch: Amd64
              runtime:
                type: Cloud
                spec: {}
              sharedPaths:
                - /var/run
            type: CI
        - stage:
            description: ""
            identifier: Build_DB
            name: Build DB
            spec:
              cloneCodebase: true
              execution:
                steps:
                  - step:
                      identifier: Build_and_Push_DB
                      name: Build and Push DB
                      spec:
                        connectorRef: mycontainerregistryconnector
                        dockerfile: Dockerfile.db
                        repo: "${MY_CONTAINER_REGISTRY_LINK}"/library/postgres
                        tags:
                          - 0.0.1
                      type: BuildAndPushDockerRegistry
                  - step:
                      type: AquaTrivy
                      name: AquaTrivy
                      identifier: AquaTrivy
                      spec:
                        mode: orchestration
                        config: default
                        target:
                          type: container
                          detection: auto
                        advanced:
                          log:
                            level: info
                        privileged: true
                        image:
                          type: docker_v2
                          name: library/postgres
                          domain: "${MY_CONTAINER_REGISTRY_LINK}"
                          access_id: admin
                          access_token: <+secrets.getValue("mycontainerregistrysecret")>
                          tag: 0.0.1
              platform:
                arch: Amd64
                os: Linux
              runtime:
                spec: {}
                type: Cloud
            type: CI
    - stage:
        description: ""
        identifier: Dynamic_Tests
        name: Dynamic Tests
        spec:
          cloneCodebase: true
          execution:
            steps:
              - parallel:
                  - step:
                      identifier: postgres
                      name: postgres
                      spec:
                        connectorRef: mycontainerregistryconnector
                        image: "${MY_CONTAINER_REGISTRY_LINK}"/library/postgres:0.0.1
                        portBindings:
                          "5432": "5432"
                        shell: Sh
                      type: Background
                  - step:
                      identifier: redis
                      name: redis
                      spec:
                        connectorRef: mycontainerregistryconnector
                        image: "${MY_CONTAINER_REGISTRY_LINK}"/library/redis:alpine
                        portBindings:
                          "6379": "6379"
                        shell: Sh
                      type: Background
              - step:
                  identifier: sqli
                  name: sqli
                  spec:
                    command: wait-for postgres:5432 -- python run.py
                    connectorRef: mycontainerregistryconnector
                    image: "${MY_CONTAINER_REGISTRY_LINK}"/library/sqli:0.0.1
                    portBindings:
                      "8080": "8080"
                    shell: Sh
                  type: Background
              - step:
                  identifier: Zap
                  name: Zap
                  spec:
                    mode: orchestration
                    config: default
                    target:
                      type: instance
                      detection: auto
                    advanced:
                      log:
                        level: info
                    instance:
                      domain: sqli
                      protocol: http
                      port: 8080
                  type: Zap
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
        type: SecurityTests
  tags: {}
